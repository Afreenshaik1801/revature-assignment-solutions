# -*- coding: utf-8 -*-
"""14-10-2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14iWRiazDe8CevsDxQHBOVFSG93SkcSTy
"""

#evennumber
for i in range(1, 11):
    if i % 2 == 0:
        print("Even number found:", i)
        break
else:
    print("No even numbers found.")

#firstoccurrence
numbers = [2, 3, 5, 7, 5, 9]
target = 5
index = 0
while index < len(numbers):
    if numbers[index] == target:
        print("First occurrence at index:", index)
        break
    index += 1

#largest
n=[3, 9, 1, 6, 2, 8]
largest = n[0]
for i in n:
    if i > largest:
        largest = i
print(largest)

#negative
nums = [1, 4, 6, 8, 10, -3, 5, 7]
i = 0
while i < len(nums) and nums[i] >= 0:
    print(nums[i])
    i += 1

#product
a=[10,20,30,40,50]
n=1
for i in a:
    n *= i
print("product of elements",n)

#reverse
for i in range(10,0,-1):
    print(i)

#squarepattern
for i in range(5):
    if i == 0 or i == 5 - 1:
        print("* " * 5)
    else:
        print("* " + "  " * (5 - 2) + "*")

#trianglepattern
for i in range(5,0,-1):
    print("* " *i)

#upper
s = "Hello World"
for char in s:
    if char.isupper():
        print(char)

#oops
# Base class
class Employee:
    def __init__(self, emp_id, name, salary):
        self.emp_id = emp_id
        self.name = name
        self.salary = salary

    def display_info(self):
        print(f"Employee ID: {self.emp_id}, Name: {self.name}, Salary: ₹{self.salary}")

    def calculate_bonus(self):
        return self.salary * 0.05

# Derived class: Developer
class Developer(Employee):
    def __init__(self, emp_id, name, salary, programming_language, projects):
        super().__init__(emp_id, name, salary)
        self.programming_language = programming_language
        self.projects = projects

    def calculate_bonus(self):
        return self.salary * 0.10

    def show_projects(self):
        print(f"{self.name} is working on {self.programming_language}-based {self.projects} projects.")

# Derived class: Manager
class Manager(Employee):
    def __init__(self, emp_id, name, salary, team_size, department):
        super().__init__(emp_id, name, salary)
        self.team_size = team_size
        self.department = department

    def calculate_bonus(self):
        return self.salary * 0.15

    def assign_task(self):
        print(f"Manager {self.name} assigned tasks to {self.team_size} team members in {self.department}.")

# Derived class: Intern
class Intern(Employee):
    def __init__(self, emp_id, name, salary, duration):
        super().__init__(emp_id, name, salary)
        self.duration = duration

    def calculate_bonus(self):
        return 1000

    def extend_internship(self, months):
        self.duration += months
        print(f"Internship extended. New duration: {self.duration} months.")

# --- Creating instances ---
emp1 = Developer(101, "Neha", 80000, "Python", "backend")
emp2 = Manager(102, "Raj", 120000, 10, "IT")
emp3 = Intern(103, "Amit", 15000, 6)

# --- Polymorphic Access ---
employee_list = [emp1, emp2, emp3]
for emp in employee_list:
    emp.display_info()
    print(f"Bonus: ₹{emp.calculate_bonus()}")
    print("----------------------------------------")

emp1.show_projects()
emp2.assign_task()
emp3.extend_internship(2)