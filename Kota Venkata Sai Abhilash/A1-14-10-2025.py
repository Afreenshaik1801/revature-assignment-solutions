# -*- coding: utf-8 -*-
"""Day2(Snowflake).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13nYGykAQTlfhBqvHBKKAI-Aiqui5_6Di

1 Calculate the product of elements in a list using a for loop:
"""

numbers=[1,2,3]
product = 1
for n in numbers:
  product *= n
print(product)

"""2 Print numbers in reverse from 10 to 1 using a for loop"""

for i in range(10,0,-1):
  print(i)

"""3 Find the largest number in a list using a for looP
   [3, 9, 1, 6, 2, 8]
"""

numbers=[3, 9, 1, 6, 2, 8]
big = numbers[0]
for n in numbers:
  if n>big:
    big = n
print(big)

"""4 Print all uppercase letters in a string using a for loop: "Hello World"
"""

word = "Hello World"
for ch in word:
  if ch.isupper():
    print(ch)

"""5 Find the first occurrence of a number in a list using a while loop"""

numbers = [91,23,10,57, 23, 10, 19]

i = 0
repeat = None

while i < len(numbers):
    j = i + 1
    while j < len(numbers):
        if numbers[i] == numbers[j]:
            repeat = numbers[i]
            break
        j += 1
    if repeat is not None:
        break
    i += 1

if repeat is not None:
    print("First repeating number is:", repeat)
else:
    print("No repeating number found")

"""6 Print numbers in a list until a negative number is encountered using a while loop: [1, 4, 6, 8, 10, -3, 5, 7]"""

numbers = [1, 4, 6, 8, 10,-3,  5, 7]
i=0
while i<len(numbers):
  if numbers[i]<0:
    break
  print(numbers[i])
  i+=1

"""7 Print numbers from 1 to 10. If a number is even, break the loop using a for loop and else clause"""

for i in range(1, 11):
    print(i)
    if i % 2 == 0:
        print("Even number")
        break

else:

    print("Exit")

"""8 Pattern"""

for i in range(5,0,-1):
  print('*' * i)

"""9 Pattern

"""

rows = 5
for i in range(rows):
  if i == 0 or i == rows-1:
    print("*"*rows)
  else:
    print("*" + " " *(rows-2)+"*")

"""Inheritence and polymorphism"""

class Employee:
  def __init__ (self, emp_id, name, salary):
    self.emp_id = emp_id
    self.name = name
    self.salary = salary
  def display_info(self):
    print(f"Employee ID: {self.emp_id}, Name:{self.name},Salary:{self.salary}")
  def calculate_bonus(self):
    return self.salary*0.05
class Developer(Employee):
  def __init__ (self, emp_id, name,salary, programming_lang):
    super().__init__(emp_id, name, salary)
    self.programming_lang = programming_lang
  def calculate_bonus(self):
    return self.salary*0.10
  def show_projects(self):
    print(f"{self.name} is working on {self.programming_lang} - based backend projects.")
class Manager(Employee):
  def __init__ (self, emp_id, name,salary, team_size, department):
    super().__init__(emp_id, name, salary)
    self.team_size = team_size
    self.department = department
  def calculate_bonus(self):
    return self.salary*0.15
  def assign_task(self):
    print(f"Manager{self.name} assigned tasks to {self.team_size} team members in {self.department}.")
class Intern(Employee):
  def __init__ (self, emp_id, name, salary, duration):
    super(). __init__(emp_id, name,salary)
    self.duration = duration
  def calculate_bonus(self):
    return 1000
  def extend_internship(self, extra_months):
    self.duration += extra_months
    print(f"Internship extended. New duration:{self.duration} months.")
employees=[
    Developer(101, "Neha", 80000, "Python"),
    Manager(102, "Raj",12000,10,"IT"),
    Intern(103, "Amit", 15000,6)
]
for emp in employees:
  emp.display_info()
  print(f"Bonus: {emp.calculate_bonus()}")
  print("-------------------------------")
employees[0].show_projects()
employees[1].assign_task()
employees[2].extend_internship(2)